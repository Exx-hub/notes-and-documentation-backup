11/7/22

Custom React Hooks

-- when writing tests, useCounter cannot be rendered nor called. because hooks can only be used inside a component
-- this is the error jest will throw

so instead of using render, use renderHook

renderHook(useCounter)

hooks dont have a screen, so renderHook wraps the custom hook in a function component, invoke the hook and returns an object
that has a result property.


describe("useCounter", () => {
  test("should render intitial count", () => {
    const { result } = renderHook(useCounter);
    expect(result.current.count).toBe(0);
  });

  test("should accept and render the same intitial count", () => {
    const { result } = renderHook(useCounter, {
      initialProps: {
        initialCount: 10,
      },
    });
    expect(result.current.count).toBe(10);
  });
});

-- also test with passed argument to custom hook.
-- pass a 2nd argument option object to renderHook with a key initialProps.


===========================

ACT - 

 When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    
    
 example:
 
 test("should increment the count", () => {
    const { result } = renderHook(useCounter);
    act(() => {
      result.current.increment();
    });
    expect(result.current.count).toBe(1);
  });
