11/7/22

Mocking HTTP Requests


*real api are only used for end to end tests, not really for unit or functional tests.
*for one, we dont need to make sure the server is up and running to test whether the component renders as intended
*and, since these tests are ran quite often, it might be expensive to run real apis while testing


!!! though we could still get the desired data from api by using find queries and wait for the data to come.
!!! get will not work because data is not there initially, so async await and find query should do it.
!!! but again, we should not do real api calls in our tests so we mock the api calls.

===> mock the https requests in our tests


ex. need to write a test if error is displayed or list of users are correctly displayed.

=> we mock the response to the request with a list of users, or an error

component:

import { useState, useEffect } from "react";

export const Users = () => {
  const [users, setUsers] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((res) => res.json())
      .then((data) => setUsers(data.map((user: { name: string }) => user.name)))
      .catch(() => setError("Error fetching users"));
  }, []);
  return (
    <div>
      <h1>Users</h1>
      {error && <p>{error}</p>}
      <ul>
        {users.map((user) => (
          <li key={user}>{user}</li>
        ))}
      </ul>
    </div>
  );
};


===

MSW 


- Setup -

install msw => npm i -D msw

in src create mocks folder and in folder server.ts


server.ts

// src/mocks/server.js
import { setupServer } from "msw/node";
import { handlers } from "./handlers";

// This configures a request mocking server with the given request handlers.
export const server = setupServer(...handlers);


--- in msw docs => https://mswjs.io/docs/getting-started/integrate/node



- Handlers -

--- also create handlers file in mocks folder

handlers.ts

import { rest } from "msw";

export const handlers = [
  // Match a GET request to a third-party server.
  rest.get("https://jsonplaceholder.typicode.com/users", (req, res, ctx) => {
    return res(
      ctx.status(200), // status
      ctx.json([{ name: "Alvin" }, { name: "David" }, { name: "mark" }]) 
      // mocked data similar to what you expect from api
    );
  }),
];


1. http method 2. path to api endpoint 3. function that returns the mocked response


--- now we can test with mocked http request ---


// this is an example of doing the actual api call
  test("renders a list of users", async () => {
    render(<Users />);
    const users = await screen.findByText("Leanne Graham");
    expect(users).toBeInTheDocument();
  });
  


*****to mock the api call and not actually call the api, modify setupTest file

modify setupTest file => paste below


import { server } from './mocks/server'


// Establish API mocking before all tests.
beforeAll(() => server.listen())

// Reset any request handlers that we may add during the tests,
// so they don't affect other tests.
afterEach(() => server.resetHandlers())

// Clean up after the tests are finished.
afterAll(() => server.close())


====> once this is setup, api calls will be mocked. and follow mocked data in the handlers, real api calls wont work in the tests anymore.


===> if there are api calls not configured with a handler, it will be detected and warning will be displayed.

--- so if in your component you have a fetch call to posts, but did not add a handler for this, jest will know and show a warning.

--- setup is run before all tests





