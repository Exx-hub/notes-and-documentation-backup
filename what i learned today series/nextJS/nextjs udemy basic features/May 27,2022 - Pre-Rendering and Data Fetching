MAY 27,2022

NEXT JS UDEMY - Pre-Rendering and Data Fetching 

Pre-rendering:

2 forms - SSG and SSR

SSG - pre-generate html/page during build time
    - pages are prepared ahead of time and can be cached by the server / CDN serving the app
    - incoming requests to pages can be served instantly since they are already pre-generated and stored in the CDN
    - when pages are served, hydration happens for javascript parts of the page if any. 
    
    -how to tell next js to pre-generate? getStaticProps.
    
    -getStaticProps will never run on the client or be sent to the client
    -you can run server side code on getStaticProps
    -some client side api will not be available in getStaticProps like document
    

export const getStaticProps = async () => {
  const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
  const jsonData = await fs.readFile(filePath);
  const data = JSON.parse(jsonData);

  return {
    props: {
      products: data.products,
    },
  };
};

--- example of running server side node code, in getStaticProps
--- imported the fs module and the path module --- those imports will be ignored by nextjs since it knows they are serverside code


getStaticProps returns a props object --- return { props: {} } 
getStaticPaths returns an object with paths array and options like fallback --- return { paths: [], fallback: true }


// INCREMENTAL STATIC REGENERATION (ISR)
// serves pre-rendered pages but has the functionality to regenerate the page depending on revalidate value (seconds)
// this solves stale data issue. regeneration occurs when a request is made after the elapsed revalidate time.

JSON-SERVER to simulate or create a fake api for development and testing
 
