June 12, 2022

Next Js Blog project

--finishing up


Head element for metadata.

_document.js

---this the structure of your next js app
---can include things like meta tags in the Head that is used globally, not page specific.
--- things lang seo optimization
--- things like global fonts in links or favicon

etc..




react portals****


USE REACT PORTALS for notification component.
-- added a div in _document.js with an id of "notifications"



deploying nextjs app intro

1. standard build
-next build

--produces optimized production bundles and a server-side app: requires nodejs server
--pages are pre-rendered if possible but nodejs server is required for api routes, server-side pages and page revalidations
--re-deploy needed if code changes or you dont use revalidations and need page updates

next build (npm run build) - build application for production in the .next folder

next start (npm start) - starts a nodejs server that supports hybrid pages, serving statically generated and ser-side rendered pages

2. full static build

--produces 100% static app. html css js --- no nodejs server required
--doesnt work if your app uses api routes, server-side pages or wants to use page revalidations
--re-deploy needed for alll code and content changes.

-next export


next export - exports all your pages to static html files that you can serve without the need of a nodejs server -similar to what create react app does
-allows to host your app on any static hosting service or a cdn without having to maintain a server
-but if you do so you cannot use ISR or serverside rendering
-you can use client side data fetching for dynamic content

when to use?
- landing pages,blogs and any app where content is generated at build time

package.json -
 "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "export": "next build && next export", --// add this
    "lint": "next lint"
  },


-just like a react app, you can then deploy the "out" folder to deploy statically

