July 24, 2022

**why to avoid React.FC

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in
-- the in operator

tech base basic typescript with react


1. basic props
   - optional props
   - default props
   - prop types / interface
   
2. basic state
   - type inference and type annotation
   - union types
   -interface for object types instead of nesting an object in another object
   -creating a separate interfaces file and exporting when using
   
3. form and events
   -change event
   -form event 
    then what element
    
    ex. (event: ChangeEvent<HTMLInputElement>)
    
    
4. Context API
- a little tricky.

reference = https://www.youtube.com/watch?v=bmxQzJHFCV8&list=PLG-Mk4wQm9_LyKE5EwoZz2_GGXR-zJ5Ml&index=5

type AppState = typeof initialState; or type AppState = { count: number } 
type Action = {type: "SET_COUNT", payload: number} | {type: "SET_COUNT_TO_100"}

explicitly set type of state and action
create type of provider props / children
add type to createContext



5. Enums
- define a set of constants in a container. like an object.


enum ShoppingProcess {
  details = "Details",
  shipping = "Shipping",
  payment = "Payment",
}

// use unions over enums as possible

type CheckoutStep = "Details" | "Shipping" | "Payment";


6. GENERICS

interface Item {
  id: number;
}

// this is where you use generics
interface BasicGenericsProps<T> {
  items: T[];
}

function BasicGenerics<T extends Item>({ items }: BasicGenericsProps<T>) {
  return (
    <ul>
      {items.map((item) => (
        <li key={item.id}>{JSON.stringify(item)}</li>
      ))}
    </ul>
  );
}

export default BasicGenerics;


https://www.youtube.com/watch?v=F0uogVTrVJI&list=PLG-Mk4wQm9_LyKE5EwoZz2_GGXR-zJ5Ml&index=7


7. TS Type Narrowing with React

--https://www.youtube.com/watch?v=vbHpjdu7N9s&list=PLG-Mk4wQm9_LyKE5EwoZz2_GGXR-zJ5Ml&index=8

--also a little complicated but doable

--narrowing is done not only with type of. i think any if check can work 
--- in operator

ex.

    <ul>
      {items.map((item) => {
        if ("imageUrl" in item) {
          return (
            <li key={item.id}>
              {item.title && <h2>{item.title}</h2>}
              {item.imageUrl && <img src={item.imageUrl} alt={item.title} />}
            </li>
          );
        } else {
          return <li key={item.id}>{item.quote && <h2>{item.quote}</h2>}</li>;
        }
      })}
    </ul>
