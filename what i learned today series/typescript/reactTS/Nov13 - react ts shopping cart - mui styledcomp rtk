13/11/22

React TS Shopping cart

*material ui
*styled components
*react query

*fakestoreapi

==================================================
1. practicing using typescript
2. react query refresher
3. context api refresher
	-- apparently this app did not use context api but i practiced implementing it anyway.

4. mui and styled components practice and refresher and comparison

5. debuggin code

=================================================
typescript things:

type Product => which is the main item of this project

type of data fetched
passed to promise in fetcher function
data to be returned also typed

useQuery data also typed

product card props typed

handleclick type

all functions and props

useState type


=== basically, TS required was props and function parameters, yung mga nag wawarning pag wala.

======


MUI => sx property adds and overrides built in styles. kinda like inline styling of custom component. with !important

-minimal use of mui. just for some specific features. most styles from styled components -- so basically vanilla css
-like grids and media query. so easier..

==================================================
Styled components

-- kinda like normal css, but has some features i can easily study when required in the future.
================================================


1. testing / refresher how to use context api.
  -- good but some problems in relation to typescript
  
  

2. set up react query and test 

--- wrap whole app with QueryClientProvider passing in new instance of QueryClient


const queryClient = new QueryClient();

   <QueryClientProvider client={queryClient}>
        <App />
    </QueryClientProvider>
    
    
    
3. setup App.ts imports to use
-mui
-react query
-components
-styles


4. create fetcher function for react query queries AND create type / interface for response data from api

export type Product = {
  id: number;
  title: string;
  price: number;
  description: string;
  category: string;
  image: string;
  rating: Rating;
  amount: number;
};

export type Rating = {
  rate: number;
  count: number;
};

const fetcherFunction = async (): Promise<Product[]> => {
  const response = await fetch("https://fakestoreapi.com/products");
  const data: Product[] = await response.json();
  return data;
};


5. test query => call useQuery hook using fetcher function created

-------------  const { data, isLoading,error } = useQuery<Product[]>("products", fetcherFunction);


---- use data and map through to create ProductCard component per item in the data array
---- pass props dynamically, the usual react things


6. Create product card component, pass each item as prop


7. wrap mapped data into a grid


8. add state for cartItems and isCartopen


9. add drawer for the sliding cart


10. create handleAdd to cart function to add items to the card when clicked


11. style for the cart button to open the cart


export const StyledButton = styled(IconButton)`
  position: fixed;
  z-index: 100;
  right: 20px;
  top: 20px;
`;

--- instead of providing css rules inside the ``, you pass the component as prop, in this case the iconbutton

IconButton here is the icon from mui. you can do this for other components.

***read the docs if needed.


12. add badge to the icon. or wrap the icon with a badge to show cart items count.



--- stopped here and copied. will review this code and try to make my version..



======================
handleRemoveCart logic of reduce:


cartItems = ["bag","shirt","jacket"] and cartItems = ["bag","shirt","jacket qty2"]

acc = []


once clicked jacket w qty 1, iterate over cart items array

1st iteration, id doesnt match so returns spreaded acc and current item

acc = []
current item = bag

when spreading an empty array will spread nothing

return [...acc, item]; => [bag]


so acc now is ["bag"]


2nd iteration, id also doesnt match, so spread acc again and add current item

acc = ["bag"]
current item = shirt

return [...acc, item]; => ["bag","shirt"]


3rd iteration with qty 1, id does match


acc = ["bag","shirt"]
current item = jacket


if qty of jacket = 1

return acc;

returns just ["bag","shirt"], effectively removing the jacket.


3rd iteration b, qty of jacet 2, id does match


acc = ["bag","shirt"]
current item = jacket qty:2


return [...acc, { ...item, qty: item.qty - 1 }];


so return an array [], spread acc, ["bag","shirt"], add jacket item after minus qty 1

returns ["bag","shirt","jacket qty1"]

====================================

get total items logic:

- we need to use reduce because of the qty property. some items may have multiple qty
- if no qty, or item can just be added once, just cartItems.length will do.


cartItems = ["bag","jacket"]

acc = 0


1st iteration

acc = 0
currentITem = bag

acc = 0 + bag.qty = 1

0 + 1 = 1 (acc)


2nd iteration

acc =1 
current item = jacket

acc = 1 + jacket.qty = 1

1 + 1 = 2 (acc)













