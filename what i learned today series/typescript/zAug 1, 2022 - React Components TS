August 1 ,2022


Link about TS and REAct

Blog about generics


https://devtrium.com/posts/react-typescript-using-generics-in-react --- good blog

-can be used as reference


ReactNode , React.Element, JSX.Element

=> https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement

****take away, finally understood the confusing flow of typing generics for functional components


Correct Flow of Typing a Fuctional Component in React and Props
-so its not confusing.

1. Type the props
2. Add Generic Variable to Functional Component
3. convert type of props to be generic
4. create interface for the props using generic variable nad pass generic variable to the props
5. replace explicitly typed props with props interface with generics you created



// Type the props
// 1. add type to props directly without creating props Type cause its confusing
//- define props type directly

// function GenericList({ items, render }: {items: string[], render: (item: string) => ReactNode} )  {

// Add Generic to Component
// 2. add Generic to function Component
//   const GenericList = <T,> ({ items, render }: {items: any[], render: () => any}  ) => {

// Convert type to Generic Type like in Function Component
// 3. const GenericList = <T,> ({ items, render }: {items: T[], render: (item: T) => React.ReactNode}  ) => {

// Create interface for the props you added Type to
//4. {items: T[], render: (item: T) => React.ReactNode} into an interface
// into
// interface GenericsListPropsType {
//     items: T[];
//     render: (item: T) => React.ReactNode
// }

// but add Generic to the interface to be able to use Generics in the interface

// interface GenericsListPropsType<T> {
//     items: T[];
//     render: (item: T) => React.ReactNode
// }

// 5. replace verbose explicitly typed props with interface created with T
// const GenericList = <T,> ({ items, render }: GenericsListPropsType<T> ) => {
// and that is the correct order or flow of generics with props and in component



