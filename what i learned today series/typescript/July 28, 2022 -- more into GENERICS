July 28, 2022

TS Generics

TypeScript generics is basically a way to pass arguments to a TS type or interface.

key points:
Record type
 -Record<string,string>


  type MyUselessType<T extends unknown> = T;
  
  type String = string

    let myUselessString: MyUselessType<string>; // correctly becomes of string type

    let myUselessNumber: MyUselessType<number> // number
    
    
     const myString = "alvin";
    const myUselessFunction = <T extends unknown> (input: T) => input;

    myUselessFunction(myString)
    myUselessFunction<number>(2)
    
    
    
    
      const user = {
    firstName: "Test",
    lastName: "User",
  };

  const getValue = (data: Record<string, string>, key: string) => data[key];

  const firstName = getValue(user, "firstName");
  console.log(firstName);

  const anything = getValue(user, "anything");
  console.log(anything);

  type MyUselessType<T extends unknown> = T;

  type String = string;

  let obviousString = String;
  let myUselessString: MyUselessType<string>;

  let myUselessNumber: MyUselessType<number>;


Solution:

 const getValue = <T extends Record<string,string>>(data: T, key: keyof T) => data[key];
 
 --- would not allow "anything" as 2nd parameter because there is no key "anything" from the passed user object
 
 
 
 ---more in the vscode for this tutorial
