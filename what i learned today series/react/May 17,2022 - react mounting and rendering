May17:

what i learned today:


React Mounting vs rendering

-mounting when a component get rendered / painted on the DOM for the first time
-re-render



Here's a brief tldr;

"Rendering" is any time a function component gets called (or a class-based render method gets called) which returns a set of instructions for creating DOM.
"Mounting" is when React "renders" the component for the first time and actually builds the initial DOM from those instructions.
A "re-render" is when React calls the function component again to get a new set of instructions on an already mounted component.

in functional component, it is just like a function call similar to the render method of class components
-the functional component is simply called on every render... App()



-Class component merges state
- in class components, the object you pass to setState is merged to the component state.
- unlike in functional component, there is no merging, so you need to use the spread operator to make copy of the current state then add to that state, basically imitates the merging.

this.state = {
      name: "alvin",
      age: 34,
    };

this.setState({name: "ACOSTA"}); --- merges this setState to currentState. 

updated state = name: "ACOSTA",age 34



in FC: need spread!

 setPersonState({ ...personState, name: "ACOSTA" });
 --need to spread current state. if not state will only be name: ACOSTA. age will be removed
 
 
 
-Prop drilling upward?
--getting a value from a child component.
-- i think to do this is to create a function from the parent and pass it as props to the child,
this functions accepts a paremeter, which is the value that you need? hmm look into this.

--im not sure cause im not seeing it elsewhere but i can make it work. OR LIFTING THE STATE UP>
- i guess the best way is to lift the state up, but if you really need to, then you can pass the function from the parent to the child that receives the data the parent needs
