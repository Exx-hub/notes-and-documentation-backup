June 24 , 2022


-backend roadmap silip
-nextjs config - node js module can include a lot of things - read docs if you need anything
-deploying next js app - vercel, aws, heroku --- docs are your go to

-another reason for not using index as key in lists -- react will not know if you removed something or if an item in index of 3 is the same. it will just render the changes. the item in index 3 may be the item on index 4 last time. even though you removed the item on index 3. and item with index 3 now is item with index 4 last time.
- also if you have multiple lists in your component. more than one item will have index of 0 and index of 1 etc

--using key prop for reusable component, or reused element?


 The exception to this is the key prop. This allows you to return the exact same element type, but force React to unmount the previous instance, and mount a new one. This means that all state that had existed in the component at the time is completely removed and the component is "reinitialized" for all intents and purposes. For components, this means that React will run cleanup on effects (or componentWillUnmount), then it will run state initializers (or the constructor) and effect callbacks (or componentDidMount).
 
 -React memo and lifting the expensive component up and passing it as props.
 - if parent component does not re-render, the props should have not changed, so the expensive component passed as props will also not re-render.
 
 **https://kentcdodds.com/blog/optimize-react-re-renders
 
1. "Lift" the expensive component to a parent where it will be rendered less often.
2. Then pass the expensive component down as a prop.
