September 12 - 13 , 2022


DAVE GRAY MERN React Part

--start with FE React of techNotes


--in this project i am looking forward to learn:

1. how login is implemented as compared to EDS
2. how redux will be implemented. and think of how you can theoretically apply it to EDS?
3. how  the userProfile class of eds is done here. saving user creds and tokens and etc.
4. folder structure
5. best practices
6. v6 routing react router
7. layout practices --- compare and analyze with theoretical own implementation





=====================================================================================

1. create new app for client (FE) using CRA


2. install - react router for routing =========> need some catching up to do with react router v6 -- anylyze code!!

	- setup Router for project in index

--- react router v6 nested routes use Outlet.
-----outlet is like props.children in nextjs Layout component
-------when url matches, Component with outlet gets rendered and child routes are passed out from the outlet,
--------and renders component that will continue to match from outlet. hmm haha

--- use of Layout component a little similar to Layout implementation in nextjs wherein Layout is like a wrapper component
    and renders the child routes (which has components). -- given that layout uses Outlet.
    
       <Routes>
       <Route path="/" element={<Layout />}>
        <Route index element={<Public />} />
        <Route path="/login" element={<Login />} />
       </Route>
      </Routes>
      
https://reactrouter.com/en/main/getting-started/overview

-- in react router v6, instead of useHistory and history.push to programmatically change routes,
   useNavigate and navigate is used.   navigate("/about) === history.push("/about)
   
-- DashLayout is nested in Layout and will contain protected routes as children

****folder structure followed would be as per redux and rtk query docs.
---- features folder.

--path property of route now dont need to specify / just the name.
// notice in path how you dont need to put a trailing backslash anymore
  ex. <Route path="login" element={<Login />} />
  
  
  
•TODAY'S FOCUS:
-react router v6 new features and implementation
-nested routing using react router v6

-- so just like in most apps, one of the first things that you need done is routing. even just placing placeholder components first without content and logic. just make sure the routing works from page to page even nested ones




===========================================================================================

Sept 13

-focus is state management w redux and rtk query as api layer


•install redux toolkit and rtk query

=> npm i @reduxjs/toolkit react-redux

•create app folder and create store.js
 - in store.js configure store and export
 - add a Provider in your root file (index) and provide the store


•create api folder in app folder and in api folder create apiSlice

import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export const apiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3500" }),
  tagTypes: ["Note", "User"],
  endpoints: (builder) => ({}),
});



•---now go to features, first with the user folder, create usersApiSlice.js

  -- using createSelector and createEntityAdapter 
  -- also import apiSlice that was previously created in this usersApiSlice 

-- apiSlice.injectEndpoints



• now to create the views for notes and users

-- in UserList.js, import the hook from usersApiSlice -> useGetUsersQuery

==== much like useQeury in react query, this hook is where the data is fetched

  const {
    data: users,
    isLoading,
    isSuccess,
    isError,
    error,
  } = useGetNotesQuery();


---from here, can use data as users to render your ui


--- we pass user id to each User component

--- in User Component, we use the id to fetch specifcic user, with useSelector hook from getSelector in notesApiSlice.

--- yeah i know too verbose.


---- after getting each note from useSelector, able to render each user 




