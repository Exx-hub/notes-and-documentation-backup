September 29 - 30, 2022


Continuation Dave Gray MERN Stack Project vid# 7




playing around:

create add new note component
create add note endpoint
create useAddNoteMutation

test in add new note component

working!
=================================================

going to implement features on my own first.



ADD NOTE

create add new note component
create add note endpoint
create useAddNoteMutation

- added button to navigate to add new note form component


EDIT NOTE ---
-create edit note component with dynamic url param for each id.
-extract noteId from params with useParams
-use this note id to select note by id
- similar to add note => add state and form component
- select all users too for the dropdown
- add handle edit logic



added navigate to both edit and post after adding or editing. to see if invalidation of cache works and displays updated notes 



DELETE NOTE ---
created delete mutation
added delete icon beside edit icon
used delete hook to delete note and update list with invalidate tags


======
okay done implementing my own.

starting the video...


create endpoints for CRUD both for user and notes
add additional routing for adding and editting users and notes
add config dir with roles.js for ROLES object to use for object lookup. like in config of EDS

create add user and edit user forms

create edit user and render edit user form component 

--bug solved => remove keep unused data which was set to 5 seconds before. that was why the data gets cleared




***Array.from()
--creates an array from iterable objects.
-- can add 2nd paramter which is a map callback function that maps over created array



bug last night was because of initial fetch on app load. since edit note unmounts the NoteList component
where we have our fetch notes query, that query is unsubscribed to and throws away fetched and cached data.

so when we delete, delete operation succeeds but there is no cached data to invalidate, so the delete mutation does not
send an isSuccess. it reains in pending status.


one solution is to fetch data on app load. 


store.dispatch(notesApiSlice.endpoints.getNotes.initiate()); => the app is always populated with notes data.


another from dave is to create a preFetch component. i think this will be similar to above. only in a separate file..

so yeah, prefetch is a wrapper route component that does the queries initially like above. and its a component wrapping all protected routes (notes and users components).

so even if you refresh, that will unmount and re-mount the wrapper prefetch component and does a re-fetching of data.
data is not lost when editting even on refresh.



FETCHED DATA REVALIDATION ON INTERVAL / PREVENT STALE DATA ESP when multiple users: 

1. add setupListeners(store.dispatch) at the bottom of store.js
=> this enables features and options in your queries

2. add options / arguments in your useQuery call

ex.

const UsersList = () => {
  const {
    data: users,
    isLoading,
    isSuccess,
    isError,
    error,
  } = useGetUsersQuery(undefined, {
    pollingInterval: 10000,
    refetchOnFocus: true,
    refetchOnMountOrArgChange: true,
  });



- refetch interval in milliseconds
- refetch when you go back and focus on page
- refetch when component remounts obviously






























