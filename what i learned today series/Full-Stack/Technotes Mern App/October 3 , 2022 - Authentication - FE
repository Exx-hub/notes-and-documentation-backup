October 3, 2022

Dave Gray MERN stack - Authentication vid# 9 FE LOGIN







doing shit on my own, connecting the login api...

1. create basic login form component - with form and submit function and login api and store creds usage

2. set up auth slice - initial state and store credentials here

3. set up extended api slice for auth -- -- login query here (authApiSlice)


-- so login query in login form component, use username and password input, if success, gets response data from server
that has success mesasge and access token.

-- dispatch storeCredentials to save user and token to global state (auth state)


---use token for protected routes


4. now that you have saved user creds and token in state, create ProtectedRoute.js with Outlet

---- wrap ProtectedRoute component on routes you want to protect. 
---- use selector and select token, if token exists render Outlet, if not reroute back to login page.


5. include token in headers --- to allow access to restricted endpoints like notes
--- in fetchBaseQuery add prepareHeaders option. accepts headers and {getState} as params
--- get token from global state through getState function
--- check if token exists, if it exists set headers => authorization & `Bearer ${token}`
--- return headers

---- this should include token in the authorization header of the request object




RESPONSE COOKIE and REQUEST COOKIE INTERACTION

--- when a user hits login endpoint, which has res.cookie
--- server sends cookie with the response. in Set-Cookie header and in it is whatver is inside the cookie
--- default path is "/" if not manually set
--- so when client hits "/" endpoint, it automatically sends cookie with the request object and so on and so forth
