**FILE-BASED ROUTING 

Nextjs offers file-based routing.

-traditional react apps have code based routing, usually with react router

-everything under the pages folder, are considered as routes.

-remember that components under pages should have an export default, so next js knows that the component is a route

ex. 
/pages/index.js = home page
/pages/about.js = about page 

 index.js will be root path for every page/folder.

 myDomain.com = pages/index.js

 myDomain.com/products = pages/products/index.js


 --when routing using the file-based routing, components need to be exported defaultly.
 -- export const About -- not allowed


 **NESTED Paths / Routes

 -can also do nested routes
 ex.
 /pages/products/index.js == default page of products



 **DYNAMIC Paths

 ex.  /pages/products/[productId] ==  dynamic routing at work here 

 [productId] is like a placeholder and triggers when none of that files in the folder match the url


 - to extract the value of the placeholder used, import useRouter from next save to a constant router.

 -you can view the properties with console.log(router)
 -extract router.query

 >>> if using class component, useRouter === withRouter


 **CATCH ALL ROUTES
 -in the router.query, will return an array of all params after directory name

 ex.
 pages/blog/2020/12 == req.query = { slug: ["2020","12] } -----placeholder is "slug" 
 pages/blog/1 == normal dynamic route == req.query = { blogId: 1 }


 **Link Component for Routing
 -using plain anchor tags sends a new request everytime that is why it is reloading/loading when you click

 -question if need to have anchor tag inside Link tags? or its okay not to unclude anchor tags?

 -another note, you can add an object value in href instead of a string

 ex.
 <Link href={{
     pathname: "/clients/[id]",
     query: {id: someId}
 }}>
 <a>My Link</a>
 </Link>


 ***can look into doing this if needed but for mostly I think go for the string method for href


 -can disable scroll to top using Links. add scroll property and set to false
 -can also add replace property to replace the current with the new one, instead of adding to the history stack.
  ---if you replace, you cannot go back to the previous navigated page like when using history stack

 **Navigating Programmatically
 --just like history.push or history.replace from react router
 - here using the router from useRouter hook -- you can also use router.push or router.replace etc 


404.js in pages to display your custom 404 page