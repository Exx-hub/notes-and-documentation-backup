Why Typescript?

get to learn potential bugs as youre typing the code than at runtime in the browser

provides a way to describe the shape of an object providing better documentation and autocomplete

makes maintenence and refactoring of large code bases much easier



npx create-react-app <foldername> --template typescript

-Typing Props
-Basic Props
-advanced props - optional, children as props, exact string literals as union
-event props

 const handleClick = (e: React.MouseEvent<HTMLButtonElement>, id: number) => {
    console.log(e, id)
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value)
  }
  
 handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void
 
 handleClick: (event: React.MouseEvent<HTMLButtonElement>, id: number) => void
 
 -style props
  -styles: React.CSSProperties
  
-can still destructure props

-moving types to another file and export then import to component


HOOKS:

1. UseState - basic type
   - no explicit typing needed, but will throw errors if not matching type inferred from initial state
   - example:  const [ isLoggedIn, setIsLoggedIn ] = useState(false);
    - cannot setIsLoggedIn(100) - will only accept boolean
    - cannot get isLoggedIn.length because boolean type has no length
    
2. UseState - future value
   -  const [ user, setUser ] = useState<AuthUser | null>(null)
   - telling typescript that user state can be null or authuser type which is a typed object

   ex.-
   
import { useState } from 'react'

type AuthUser = {
    name: string
    email: string
}

function User() {
    const [ user, setUser ] = useState<AuthUser | null>(null)

    const handleLogin = () => {
        setUser({
            name: 'alvin',
            email: 'alvinfloresacosta@gmail.com'
        })
    };
    const handleLogout = () => {
        setUser(null)
    };
    return (
        <div>
            <button onClick={handleLogin}>Login</button>
            <button onClick={handleLogout}>Logout</button>
            <p>User name is {user?.name}</p>
            <p>User email is {user?.email}</p>
        </div>
    )
}

export default User



3. UseState - Type Assertion
  - const [ user, setUser ] = useState<AuthUser>({} as AuthUser)

  - user will be initialized soon after setup and will always have a value after


4. UseReducer
  - if the next state depends on the previous state or more complex state logic
 




















