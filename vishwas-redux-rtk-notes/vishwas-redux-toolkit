========================
2nd Part - REDUX TOOLKIT
========================


redux concerns! - 
1. requires too much boilerplate code
- action type, action, action creator, switch in a reducer

2. A lot of other packages have to be installed to work with redux
-to handle async actions: redux thunk
-nested state updates: immer library
-debug redux apps: redux-devtools

***There was a needto improve developer experience for redux
-hence REDUX TOOLKIT was created.


Redux Toolkit - official, opinionated, batteries-included toolset for efficient Redux Development
-abstract over setup process
-handle most common use cases
-include some useful utilities


npm i @reduxjs/toolkit


-after installing, redux toolkit has a different opinionated project archi

-create folder called app, and create store.js inside. this will contain store logic
-next create a folder called features, this will contain features of app
 -ex. create cake and icecream folder in features folder
 
 -group together reducer,actions and action creators for a single feature in a single folder
 
 
 by convention a feature is separated into "slices" in redux toolkit -
 ex. cakeSlice.js
 
 
 step1 configure the SLICE:
 
 const createSlice = require("@reduxjs/toolkit").createSlice;

const initialState = {
  numOfCakes: 10,
};

const cakeSlice = createSlice({
  name: "cake",
  initialState,
  reducers: {
    orderCake: (state, action) => {
      state.numOfCakes = state.numOfCakes - action.payload;
    },
    restockCake: (state, action) => {
      state.numOfCakes = state.numOfCakes + action.payload;
    },
  },
});
module.exports = cakeSlice.reducer;
module.exports.cakeActions = cakeSlice.actions;


-redux toolkit way

--covers action type, actions creators, action objects and switch case.
-- all covered in the createSlice method
 
 
 
 step2 configure the STORE:
 --passing the reducer in the store
 
 const configureStore = require("@reduxjs/toolkit").configureStore;
const cakeReducer = require("../features/cake/cakeSlice");

const store = configureStore({
  reducer: {
    cakeState: cakeReducer,
  },
});

module.exports = store;



  step3  use store and cakeActions in file intended
  
  const store = require("./app/store");
const { cakeActions } = require("./features/cake/cakeSlice");

console.log("initial state:", store.getState());

const unsubscribe = store.subscribe(() =>
  console.log("updated state:", store.getState())
);

store.dispatch(cakeActions.orderCake(1));
store.dispatch(cakeActions.orderCake(1));
store.dispatch(cakeActions.orderCake(1));
store.dispatch(cakeActions.restockCake(3));

unsubscribe();

 
 
step 1. set up the slice - actions, action creators, reducers -- with createSlice
step 2. setup the store -- with configureStore instead of the deprecated createStore
step 3. use store and actions
 
 
 https://yosracodes.hashnode.dev/creating-a-to-do-list-app-using-redux-toolkit#heading-creating-the-todo-slice
 -example of redux-toolkit todoList
 
 -review todoSlice why object cant be read in console
 
 
 
 APPLYING MIDDLEWARE in Redux Toolkit:
 
 ex.
 
 const logger = reduxLogger.createLogger();

const store = configureStore({
  reducer: {
    cakeState: cakeReducer,
    iceCreamState: iceCreamReducer,
    // todoReducer,
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),
});


EXTRA REDUCERS -
-in redux core, reducers in a combinedReducer method, all receive dispatch actions by the store.
-but of course only its corresponding reducer recognizes the action type.
-but all receive the action.

-for example, when dispatching a store.dispatch(orderCake()), both icecreamReducer and cakeReducer receive the dispatch action, but only cakeReducer can act on the dispatch, unless you specify a CAKE_ORDERED case in iceCreamReducer.

- in redux toolkit, this is not the case. an action is specified only for its slice.
- reducers from one createSlice will only respond to actions from its slice
- if you want cakeSlice to respond to actions from iceCreamSlice, you need to pass the property "extraReducers" and put logic there
 
 - extraReducers allows createSlice to respond to other action types besides the types it has generated.
 -but even then, can only update its own state.***
 - these are additional reduces apart from reducers generated by createSlice
 
 
 extraReducers "map object" notation:
 
 const iceCreamSlice = createSlice({
  name: "icecream",
  initialState,
  reducers: {
    orderIceCream: (state, action) => {
      state.numOfIcecream -= action.payload;
    },
    restockIceCream: (state, action) => {
      state.numOfIcecream += action.payload;
    },
  },
  extraReducers: {
    ["cake/orderCake"]: (state) => {
      state.numOfIcecream--;
    },
  },
});
 
 
 
 The extraReducers "builder callback" notation: (recommended way)
 
  extraReducers: (builder) => {
    builder.addCase(cakeActions.orderCake, (state, action) => {
      state.numOfIcecream -= action.payload;
    });
  },
 
 
 
 ASYNC THUNK in toolkit:
 
 -createAsyncthunk
 
 
 
 
 const createSlice = require("@reduxjs/toolkit").createSlice;
const createAsyncThunk = require("@reduxjs/toolkit").createAsyncThunk;
const axios = require("axios");

const initialState = {
  loading: false,
  users: [],
  err: "",
};

// generates pending , fulfilled or rejected action types
const fetchUsers = createAsyncThunk("user/fetchUsers", () => {
  return axios
    .get("https://jsonplaceholder.typicode.com/users")
    .then((response) => response.data.map((user) => user.id));
});

const userSlice = createSlice({
  name: "user",
  initialState,
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.loading = false;
        state.users = action.payload;
        state.err = "";
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.loading = false;
        state.users = [];
        state.err = action.payload;
      });
  },
});

module.exports = userSlice.reducer;
module.exports.fetchUsers = fetchUsers;
 
 
 
 
 
 
 
 
 
