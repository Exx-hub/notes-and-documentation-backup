STATIC GENERATION:

-pre-rendering method where html pages are generated at build time

-nextjs by default statically generates every html page in our app, without any configuration, when we build it for production. This allows the page to be cached by CDN and indexed by a search engine. 
 
 
 -for production build, page will be pre-rendered once when we run the build command
 
 -in development mode, page is pre-rendered for every request you make
 
 
 STATIC GENERATION without Data
 -serve pre-rendered pages
 
 STATIC GENERATION with Data
 
 1. GETSTATICPROPS
 
 ex. 
 export async function getStaticProps() {
  const response = await fetch("https://jsonplaceholder.typicode.com/users");
  const data = await response.json();

  console.log(data);

  return {
    props: { data },
  };
}
 
 
usage: 
displaying list of products, topics , users

--get static props basically is like fetching from useEffect in a react app. asynchronously fetches data and returns an object with props, which is passed to the component using props. - run on the server side at build time


1. getStaticProps runs only on the server side 
   - function will never run client side
   - wont be included in js bundle
   - accessing fs like in node can be done in getStaticProps
   -*** is allowed only in a page but not a regular component file
   - should return an object and should contain props key which is also an object
   -will run at build time, but in development runs on every request

 
 npm run build - create optimized production build, able to see details in console
 
 then npm start to run production/ build app on localhost3000
 
 ---any link component in the viewport will be pre-fetched by default including corresponding data for pages using static generation
 
 ****  home page without users link will not fetch html and data for users. but if you add a link to users page in the home page, users html and data will be fetched when home page is loaded.
 
 **** when a page with getStaticProps is pre-rendered at build time, in addition to the page html, nextjs generates a json file holding the result of running getStaticProps
 
  - the json file will be used in client-side routing through next/link or next/router
  - when you navigate to a page that's pre-rendered using getStaticProps, nextjs fetches/uses the json file that was pre-computed at build time and uses it as the props to create the page component client side
  
  - this means that client-side page transitions will not call getStaticProps as only the exported json is used
 
 
 
***MASTER-DETAIL PATTERN***
-also called list-detail pattern

ex. 
/blog - list of blog titles 
/blog/blogId - goes to specific blog title


-CONTEXT??? - getStaticProps automatically receives.

2. GET STATIC PATHS
-inform nextjs of possible values
***understand getstaticpaths flow - check!
-getstaticpaths gets an array of items and maps through array returning an object with params key for each item which will be saved as paths array. params object has id property or whatever you called each path.
-getstaticpaths then return the paths in an object with fallback property as well.

-through this getstaticprops can access the paths in the context. getstaticpaths returns one context for each item mapped and getstatic paths is also run for each path.


fallback: FALSE
- paths returned from getStaticPatsh will be rendered to html at build time by getStaticProps
- any path/s not returned by getStaticPaths will result in a 404 page

when to use?:
-if app has small number of paths to pre-render.
-when new pages are not added often
-ex. blogsite with few articles is a good example


fallback: TRUE
- paths returned from getStaticPatsh will be rendered to html at build time by getStaticProps - same as false
-paths that have not been generated at build time will not result in 404. instead next will serve a fallback version of the page on first request to such a path
-in the background, next will statically generate the requested path HTML and JSON. including running getStaticProps
-when done browser receives JOSN for generated path to be used to automatically render page with required props. fallback page will be swapped to full page.
-nextjs keeps track of the new list of pre-rendered pages. subsequent requests to same path will serve the generated page just like other prerendered pages

-only paths returned from getStatic paths are pre-rendered at build time
-if there is no path, next returns a fallback page.
-next uses param to generate/ create html and json for the path or the page is statically generated and then serves pre-rendered path
-first request to a new path will load the fallback page but next requests will load full page using generated html and json 

router.isFallback

-to generate a 404 page and not a blank page for ids that exceed the items/paths fetched we must check data and return a notFound property in getStaticProps instaed of a props object

  if (!data.title) {
    return {
      notFound: true,
    };
  }


when to use?
-app has very large number of static pages that depend on data - a large e-commerce site
-if you have thousands of products you can generate a small subset of products pre-rendered and set fallback: true for the rest and succeeding products



fallback: "blocking"
- paths returned from getStaticPatsh will be rendered to html at build time by getStaticProps - same as false and true

-paths the have not ben generated at build time will not result in 404. instaed on first request, next will render the page on the server and return the generated html

- requesting the page => full page is loaded

when to use???





---little recap:

Static generation is a method of pre-rendering where html pages are generated at build time.

pre-rendered static pages can be pushed to a cdn and cached and served to clients across the globe almost instantly.

static content is fast and better for seo as they can be immediately indexed by search engines

getStaticProps - data fetching
getStaticPaths - dynamic pages

ISSUES:
1. build time is proportional to the number of pages in the application
2. page , once generated can contain stale data until you rebuild application


INCREMENTAL STATIC REGENERATION
-allows you to update static pages after you've build your application
-you can statically generate individual pages without needing to rebuild the entire site, effectively solving stale data issue

HOW??
-add revalidate key part from the props key in the return value of getStaticProps
-value for revalidate is number of seconds after which page regeneration can occur


 return {
    props: { product: data },
    revalidate: 10, // seconds
  };
  
  
  --solves stale data
  
  
  REGENERATION:
  - regeneration is initiated only if a user makes a request after the revalidate time
  - if a user visits our page but there is no other user hitting that page the entire day, no regeneration happens
  - does not automatically regenrate every 10 seconds, denotes time after which , if a request is made, regneration will occur
  - regeneration can also fail, and previously cached html could be served til subsequent regenerations
  
  




































 
